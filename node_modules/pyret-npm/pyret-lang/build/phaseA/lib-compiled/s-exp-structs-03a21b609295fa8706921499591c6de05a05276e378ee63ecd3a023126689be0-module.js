({"theMap":"{\"version\":3,\"sources\":[\"builtin://s-exp-structs\"],\"names\":[\"builtin://s-exp-structs\",\",9,0,74,14,3,190\",\",10,2,88,10,31,117\",\",11,2,120,11,22,140\",\",12,2,143,12,22,163\",\",13,2,166,13,22,186\"],\"mappingsoBAQDC,6BARCD;AAAAA;AAAAA;AAAAA;AAAAA,oBASCE,iCATDF;AAAAA;AAAAA;AAAAA;AAAAA,oBASCE,8BATDF;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCG,gCAVDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCG,6BAVDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCI,gCAXDJ;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCI,6BAXDJ;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCK,gCAZDL;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCK,6BAZDL;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAQDC,oCARCD;AAAAA;AAQDC,wBARCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SAQDC,oDARCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA\",\"file\":\"builtin://s-exp-structs\"}",
"theModule":"function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__10(R,NAMESPACE,M,$$underscore_import3,$$included$129) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://s-exp-structs\";\nvar D = R.undefined;\nvar L = [[M,10,2,88,10,31,117],\n[M,10,19,105,10,30,116],\n[M,11,2,120,11,22,140],\n[M,11,15,133,11,21,139],\n[M,12,2,143,12,22,163],\n[M,12,15,156,12,21,162],\n[M,13,2,166,13,22,186],\n[M,13,15,179,13,21,185],\n[M,9,0,74,14,3,190],\n[\"dummy location\"],\n[M,3,0,13,14,3,190]];\nvar $type$Number3 = R.getModuleField(\"builtin://global\",\"types\",\"Number\");\nvar $type$String8 = R.getModuleField(\"builtin://global\",\"types\",\"String\");\nvar $underscore_import1 = $$underscore_import3;\nvar $included$124 = $$included$129;\nvar List2 = R.getModuleField(\"builtin://lists\",\"types\",\"List\");\nvar $toplevel21 = function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__10($$resumer11) {\nvar $step20 = 0;\nvar $elidedFrames84 = 0;\nvar $ans81 = D;\nvar $al82 = L[10];\nif(R.isAR($$resumer11)) {\n$step20 = $$resumer11.step;\n$al82 = $$resumer11.from;\n$ans81 = $$resumer11.ans;\n$elidedFrames84 = $$resumer11.elidedFrames;\n$resumer11 = $$resumer11.args[0];\nanswer179 = $$resumer11.vars[0];\nis$s$num127 = $$resumer11.vars[1];\nis$s$list122 = $$resumer11.vars[2];\nis$s$str166 = $$resumer11.vars[3];\nS$Exp178 = $$resumer11.vars[4];\ns$sym172 = $$resumer11.vars[5];\ns$num132 = $$resumer11.vars[6];\ns$list124 = $$resumer11.vars[7];\nis$s$sym170 = $$resumer11.vars[8];\nis$S$Exp119 = $$resumer11.vars[9];\ns$str168 = $$resumer11.vars[10];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans81 = R.mC();\n}\nwhile(!R.isContinuation($ans81)) {\nswitch($step20) {\ncase 0: var S$Exp85 = R.nB(\"S-Exp\",L[8]);\nvar S$Exp178 = R.mBA(S$Exp85,\"S-Exp\");\nvar S$Exp117 = {\"$var\":D};\nvar is$S$Exp119 = {\"$var\":D};\nvar is$s$list122 = {\"$var\":D};\nvar s$list124 = {\"$var\":D};\nvar is$s$num127 = {\"$var\":D};\nvar s$num132 = {\"$var\":D};\nvar is$s$str166 = {\"$var\":D};\nvar s$str168 = {\"$var\":D};\nvar is$s$sym170 = {\"$var\":D};\nvar s$sym172 = {\"$var\":D};\nvar $s$list_getfields90 = function singleton_variant(f) {\nreturn f(this.dict[\"exps\"]);\n};\nvar $s$list_mutablemask89 = [false];\nvar $s$list$base86 = {\"$fieldNames\":[\"exps\"],\n\"_match\":R.mM(\"s-list\",1)};\nvar $s$list$brander87 = R.nB(\"s-list\",L[0]);\nvar $s$list$brands88 = {};\n$s$list$brands88[S$Exp85._brand] = true;\n$s$list$brands88[$s$list$brander87._brand] = true;\nvar s$list91 = R.mVC(L[0],function $synthesizedConstructor_$s$list$base() {\nreturn [List2];\n},[\"exps92\"],[L[1]],[false],[\"exps92\"],$s$list_mutablemask89,$s$list$base86,$s$list$brands88,\"s-list\",$s$list_getfields90,$s$list$base86);\nvar $s$num_getfields97 = function singleton_variant(f) {\nreturn f(this.dict[\"n\"]);\n};\nvar $s$num_mutablemask96 = [false];\nvar $s$num$base93 = {\"$fieldNames\":[\"n\"],\n\"_match\":R.mM(\"s-num\",1)};\nvar $s$num$brander94 = R.nB(\"s-num\",L[2]);\nvar $s$num$brands95 = {};\n$s$num$brands95[S$Exp85._brand] = true;\n$s$num$brands95[$s$num$brander94._brand] = true;\nvar s$num98 = R.mVC(L[2],function $synthesizedConstructor_$s$num$base() {\nreturn [$type$Number3];\n},[\"n100\"],[L[3]],[false],[\"n100\"],$s$num_mutablemask96,$s$num$base93,$s$num$brands95,\"s-num\",$s$num_getfields97,$s$num$base93);\nvar $s$str_getfields105 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$str_mutablemask104 = [false];\nvar $s$str$base101 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-str\",1)};\nvar $s$str$brander102 = R.nB(\"s-str\",L[4]);\nvar $s$str$brands103 = {};\n$s$str$brands103[S$Exp85._brand] = true;\n$s$str$brands103[$s$str$brander102._brand] = true;\nvar s$str106 = R.mVC(L[4],function $synthesizedConstructor_$s$str$base() {\nreturn [$type$String8];\n},[\"s107\"],[L[5]],[false],[\"s107\"],$s$str_mutablemask104,$s$str$base101,$s$str$brands103,\"s-str\",$s$str_getfields105,$s$str$base101);\nvar $s$sym_getfields112 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$sym_mutablemask111 = [false];\nvar $s$sym$base108 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-sym\",1)};\nvar $s$sym$brander109 = R.nB(\"s-sym\",L[6]);\nvar $s$sym$brands110 = {};\n$s$sym$brands110[S$Exp85._brand] = true;\n$s$sym$brands110[$s$sym$brander109._brand] = true;\nvar s$sym113 = R.mVC(L[6],function $synthesizedConstructor_$s$sym$base() {\nreturn [$type$String8];\n},[\"s114\"],[L[7]],[false],[\"s114\"],$s$sym_mutablemask111,$s$sym$base108,$s$sym$brands110,\"s-sym\",$s$sym_getfields112,$s$sym$base108);\nvar anf_assign116 = R.mO({\"S-Exp\":G(S$Exp85,\"test\",L[8]),\n\"is-s-list\":G($s$list$brander87,\"test\",L[0]),\n\"s-list\":s$list91,\n\"is-s-num\":G($s$num$brander94,\"test\",L[2]),\n\"s-num\":s$num98,\n\"is-s-str\":G($s$str$brander102,\"test\",L[4]),\n\"s-str\":s$str106,\n\"is-s-sym\":G($s$sym$brander109,\"test\",L[6]),\n\"s-sym\":s$sym113});\nS$Exp117.$var = anf_assign116;\nR.nothing;\n$al82 = L[8];\nvar anf_assign118 = G(S$Exp117.$var,\"S-Exp\",L[8]);\nis$S$Exp119.$var = anf_assign118;\nR.nothing;\n$al82 = L[0];\nvar anf_assign121 = G(S$Exp117.$var,\"is-s-list\",L[0]);\nis$s$list122.$var = anf_assign121;\nR.nothing;\n$al82 = L[0];\nvar anf_assign123 = G(S$Exp117.$var,\"s-list\",L[0]);\ns$list124.$var = anf_assign123;\nR.nothing;\n$al82 = L[2];\nvar anf_assign126 = G(S$Exp117.$var,\"is-s-num\",L[2]);\nis$s$num127.$var = anf_assign126;\nR.nothing;\n$al82 = L[2];\nvar anf_assign131 = G(S$Exp117.$var,\"s-num\",L[2]);\ns$num132.$var = anf_assign131;\nR.nothing;\n$al82 = L[4];\nvar anf_assign165 = G(S$Exp117.$var,\"is-s-str\",L[4]);\nis$s$str166.$var = anf_assign165;\nR.nothing;\n$al82 = L[4];\nvar anf_assign167 = G(S$Exp117.$var,\"s-str\",L[4]);\ns$str168.$var = anf_assign167;\nR.nothing;\n$al82 = L[6];\nvar anf_assign169 = G(S$Exp117.$var,\"is-s-sym\",L[6]);\nis$s$sym170.$var = anf_assign169;\nR.nothing;\n$al82 = L[6];\nvar anf_assign171 = G(S$Exp117.$var,\"s-sym\",L[6]);\ns$sym172.$var = anf_assign171;\nR.nothing;\n$step20 = 1;\n$al82 = L[9];\nvar $obj173 = R.builtins;\nvar $field174 = R.gCFL($obj173,\"trace-value\",L[9]);\nif(R.isM($field174)) {\n$ans81 = $field174.full_meth($obj173,L[9],R.nothing);\n} else {\nif(typeof($field174.app) !== \"function\") {\nR.ffi.throwNonFunApp(L[9],$field174);\n}\n$ans81 = $field174.app(L[9],R.nothing);\n}\nbreak;\ncase 1: var answer179 = $ans81;\n$step20 = 2;\n$al82 = L[8];\nvar $obj175 = R.builtins;\nvar $field176 = R.gCFL($obj175,\"current-checker\",L[8]);\nif(R.isM($field176)) {\n$ans81 = $field176.full_meth($obj175);\n} else {\nif(typeof($field176.app) !== \"function\") {\nR.ffi.throwNonFunApp(L[8],$field176);\n}\n$ans81 = $field176.app();\n}\nbreak;\ncase 2: var anf_method_obj177 = $ans81;\n$step20 = 3;\n$ans81 = R.maybeMethodCall0(anf_method_obj177,\"results\",L[8]);\nbreak;\ncase 3: var checks180 = $ans81;\n$step20 = 4;\n$ans81 = R.mO({\"answer\":answer179,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-modules\":{},\n\"defined-values\":{\"is-S-Exp\":is$S$Exp119.$var,\n\"is-s-num\":is$s$num127.$var,\n\"is-s-sym\":is$s$sym170.$var,\n\"s-num\":s$num132.$var,\n\"s-sym\":s$sym172.$var,\n\"is-s-str\":is$s$str166.$var,\n\"s-str\":s$str168.$var,\n\"s-list\":s$list124.$var,\n\"is-s-list\":is$s$list122.$var},\n\"defined-types\":{\"S-Exp\":S$Exp178},\n\"provide-plus-types\":R.mO({\"values\":R.mO({\"is-S-Exp\":is$S$Exp119.$var,\n\"is-s-num\":is$s$num127.$var,\n\"is-s-sym\":is$s$sym170.$var,\n\"s-num\":s$num132.$var,\n\"s-sym\":s$sym172.$var,\n\"is-s-str\":is$s$str166.$var,\n\"s-str\":s$str168.$var,\n\"s-list\":s$list124.$var,\n\"is-s-list\":is$s$list122.$var}),\n\"types\":{\"S-Exp\":S$Exp178},\n\"modules\":{}}),\n\"checks\":checks180});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans81;\ndefault: R.ffi.throwSpinnakerError(L[10],$step20);\n}\n}\nif($step20 !== 4) {\n$ans81.stack[R.EXN_STACKHEIGHT++] = R.mAR($al82,$toplevel21,$step20,[],[answer179,is$s$num127,is$s$list122,is$s$str166,S$Exp178,s$sym172,s$num132,s$list124,is$s$sym170,is$S$Exp119,s$str168],$elidedFrames84);\n}\nreturn $ans81;\n};\nreturn R.safeCall($toplevel21,function module_load(moduleVal) {\nR.modules[\"$builtin://s$exp$structs3\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"modules":{},
"values":{"is-s-list":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
10,
2,
88,
10,
31,
117],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"is-s-list",
"typ":"tany"},
"s-list":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
10,
2,
88,
10,
31,
117],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"s-list",
"typ":"tany"},
"s-str":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
12,
2,
143,
12,
22,
163],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"s-str",
"typ":"tany"},
"is-s-str":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
12,
2,
143,
12,
22,
163],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"is-s-str",
"typ":"tany"},
"s-sym":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
13,
2,
166,
13,
22,
186],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"s-sym",
"typ":"tany"},
"s-num":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
11,
2,
120,
11,
22,
140],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"s-num",
"typ":"tany"},
"is-s-sym":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
13,
2,
166,
13,
22,
186],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"is-s-sym",
"typ":"tany"},
"is-s-num":{"bind":"fun",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
11,
2,
120,
11,
22,
140],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"flatness":0,
"name":"is-s-num",
"typ":"tany"},
"is-S-Exp":{"bind":"let",
"origin":{"local-bind-site":["builtin://s-exp-structs",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://s-exp-structs",
9,
0,
74,
14,
3,
190],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},
"typ":"tany"}},
"datatypes":{"S-Exp":["data",{"local-bind-site":["builtin://s-exp-structs",
9,
0,
74,
14,
3,
190],
"definition-bind-site":["builtin://s-exp-structs",
9,
0,
74,
14,
3,
190],
"new-definition":true,
"uri-of-definition":"builtin://s-exp-structs"},"S-Exp",[],[["s-list",
[["exps",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"S-Exp"}]]]],
{}],["s-num",
[["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]],
{}],["s-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]],
{}],["s-sym",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]],
{}]],{}]},
"aliases":{"S-Exp":"tany"}},
"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"}]})